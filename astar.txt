import heapq

import airsim
import numpy as np
import math
import random
import copy
import time
import pygame

start_time = time.time()


def distance(p1, p2):
    return np.linalg.norm(np.array(p1) - np.array(p2))


def a_star(start, goal, obstacles):
    heap = [(0, start)]
    parent = {start: None}
    g_score = {start: 0}
    f_score = {start: distance(start, goal)}

    while heap:
        current = heapq.heappop(heap)[1]
        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            return path[::-1]

        for neighbor in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            next_node = (current[0] + neighbor[0], current[1] + neighbor[1])
            if next_node in obstacles:
                continue
            new_g_score = g_score[current] + distance(current, next_node)
            if next_node not in g_score or new_g_score < g_score[next_node]:
                g_score[next_node] = new_g_score
                f_score[next_node] = new_g_score + distance(next_node, goal)
                heapq.heappush(heap, (f_score[next_node], next_node))
                parent[next_node] = current

    return None


client = airsim.MultirotorClient()
client.confirmConnection()

client.enableApiControl(True)
client.armDisarm(True)

client.takeoffAsync().join()

start = (0, 0)
goal = (30, 30)
obstacle = []
# obstacle = [(15, 15), (15, 16), (15, 17), (16, 15), (16, 16), (16, 17)]  # Μικρό εμπόδιο
obstacle.extend([(x, y) for x in range(20, 30) for y in range(20, 30)])  # Πολύ μεγάλο εμπόδιο

path = a_star(start, goal, obstacle)
print(path)

path_length = sum(distance(path[i], path[i + 1]) for i in range(len(path) - 1))
print("Μήκος διαδρομής:", path_length)

# Αρχικοποίηση της βιβλιοθήκης pygame
pygame.init()

# Ορισμός του παραθύρου προβολής
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Path Visualization")

# Χρώματα
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.fill(WHITE)

    # Εμφάνιση των εμποδίων
    for obs in obstacle:
        pygame.draw.rect(screen, BLACK, (obs[0] * 20, obs[1] * 20, 20, 20))

    # Εμφάνιση του μονοπατιού
    for i in range(len(path) - 1):
        pygame.draw.line(screen, BLUE, (path[i][0] * 20 + 10, path[i][1] * 20 + 10),
                         (path[i + 1][0] * 20 + 10, path[i + 1][1] * 20 + 10), 5)

    pygame.display.flip()

    # Κίνηση του drone
    for point in path:
        client.moveToPositionAsync(point[0], point[1], -10, 5).join()

    client.landAsync().join()

    # Εκτέλεση μιας ακολουθίας εντολών για απαλή προσγείωση
    client.moveByVelocityAsync(0, 0, -1, 1).join()
    client.moveByVelocityAsync(0, 0, -0.5, 1).join()
    client.moveByVelocityAsync(0, 0, -0.2, 1).join()
    client.moveByVelocityAsync(0, 0, -0.1, 1).join()
    client.moveByVelocityAsync(0, 0, -0.05, 1).join()
    client.moveByVelocityAsync(0, 0, 0, 1).join()

    # Απενεργοποίηση του API έλεγχου
    client.enableApiControl(False)
    end_time = time.time()
    execution_time = end_time - start_time

    print("Ο χρόνος εκτέλεσης ήταν:", execution_time, "δευτερόλεπτα")

# Τερματισμός της βιβλιοθήκης pygame
pygame.quit()
